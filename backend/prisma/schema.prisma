// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user_role {
  id       Int    @id @default(autoincrement())
  roleName String
  users    user[]
}

model company_type {
  id       Int    @id @default(autoincrement())
  typeName String
  users    user[]
}

model user_pack {
  id       Int    @id @default(autoincrement())
  packName String
  users    user[]
}

model car_type {
  id       Int    @id @default(autoincrement())
  typeName String
  user     user[]
}

model user_dispo {
  id       Int     @id @default(autoincrement())
  goingTo  String?
  startDay String?
  endDay   String?
  startAt  String?
  endAt    String?
  comment  String?
  user     user?   @relation(fields: [userId], references: [id])
  userId   Int?    @unique
}

model user {
  id                 Int     @id @default(autoincrement())
  firstName          String? @db.VarChar(20)
  lastName           String? @db.VarChar(20)
  phone              String? @db.VarChar(20)
  email              String  @unique @db.VarChar(50)
  companyName        String? @db.VarChar(20)
  city               String? @db.VarChar(20)
  country            String? @db.VarChar(20)
  address            String? @db.VarChar(20)
  websiteUrl         String? @db.VarChar(20)
  commercialRegister String? @db.VarChar(20)
  patent             String? @db.VarChar(20)
  verified           Boolean @default(false)
  password           String  @db.VarChar(255)
  resetPasswordToken String? @db.VarChar(255)
  carNumber          String?
  carWidth           Float?
  carHeight          Float?
  carWeight          Float?

  // company type relation
  carType       car_type?     @relation(fields: [carTypeId], references: [id])
  carTypeId     Int?
  // company type relation
  companyType   company_type? @relation(fields: [companyTypeId], references: [id])
  companyTypeId Int?
  // user pack
  userPack      user_pack?    @relation(fields: [userPackId], references: [id])
  userPackId    Int?
  // role relation
  role          user_role?    @relation(fields: [roleId], references: [id])
  roleId        Int?          @default(3)

  // One-to-one
  disponibility user_dispo?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // orders relations
  deliverOrders order[] @relation("deliverOrders")
  createOrders  order[] @relation("createOrders")
}

// Order ***********************************

model order {
  id            Int     @id @default(autoincrement())
  description   String? @db.VarChar(500)
  totalWeight   Float?
  totalWidth    Float?
  totalHeight   Float?
  totalPrice    Float?
  shipmentPrice Float?

  // Status of order: created, delivered ...
  status            order_status?    @relation(fields: [orderStatusId], references: [id])
  orderStatusId     Int?             @default(1)
  // who created it relation
  createdBy         user?            @relation("createOrders", fields: [createdByUserId], references: [id])
  createdByUserId   Int?
  // who will deliver this order
  deliveredBy       user?            @relation("deliverOrders", fields: [deliveredByUserId], references: [id])
  deliveredByUserId Int?
  // One-to-one relation with order_recipient
  recipient         order_recipient?
  // packages relation: each order has many packages
  packages          order_packages[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model order_recipient {
  id            Int     @id @default(autoincrement())
  firstName     String?
  lastName      String?
  phone         String?
  city          String?
  country       String?
  streetAddress String?
  secondAddress String?
  zipCode       String?
  email         String?

  // One-to-one relation with order
  order   order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId Int   @unique

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model order_packages {
  id      Int    @id @default(autoincrement())
  length  Float?
  width   Float?
  height  Float?
  price   Float?
  // relations
  order   order? @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId Int?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model order_status {
  id         Int     @id @default(autoincrement())
  statusName String? @db.VarChar(20)
  order      order[]
}

model article {
  id          Int      @id @default(autoincrement())
  title       String   @unique
  description String?
  body        String
  published   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
